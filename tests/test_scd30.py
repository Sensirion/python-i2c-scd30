#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2025 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:     sensirion-driver-generator 1.3.3
# Product:       scd30
# Model-Version: 1.0.0
#

import pytest
from sensirion_i2c_scd30.device import Scd30Device


@pytest.fixture
def sensor(channel_provider):
    channel_provider.i2c_frequency = 100e3
    channel_provider.supply_voltage = 3.3
    with channel_provider:
        channel = channel_provider.get_channel(slave_address=0x61,
                                               crc_parameters=(8, 0x31, 0xff, 0x0))
        yield Scd30Device(channel)


def test_stop_periodic_measurement1(sensor):
    sensor.stop_periodic_measurement()


def test_set_measurement_interval1(sensor):
    sensor.set_measurement_interval(4)


def test_get_measurement_interval1(sensor):
    interval = sensor.get_measurement_interval()
    print(f"interval: {interval}; "
          )


def test_set_altitude_compensation1(sensor):
    sensor.set_altitude_compensation(440)


def test_get_altitude_compensation1(sensor):
    altitude = sensor.get_altitude_compensation()
    print(f"altitude: {altitude}; "
          )


def test_set_temperature_offset1(sensor):
    sensor.set_temperature_offset(2000)


def test_get_temperature_offset1(sensor):
    temperature_offset = sensor.get_temperature_offset()
    print(f"temperature_offset: {temperature_offset}; "
          )


def test_activate_auto_calibration1(sensor):
    sensor.activate_auto_calibration(1)


def test_get_auto_calibration_status1(sensor):
    is_active = sensor.get_auto_calibration_status()
    print(f"is_active: {is_active}; "
          )


def test_get_force_recalibration_status1(sensor):
    co2_ref_concentration = sensor.get_force_recalibration_status()
    print(f"co2_ref_concentration: {co2_ref_concentration}; "
          )


def test_read_firmware_version1(sensor):
    (major, minor
     ) = sensor.read_firmware_version()
    print(f"major: {major}; "
          f"minor: {minor}; "
          )


def test_soft_reset1(sensor):
    sensor.soft_reset()


def test_start_periodic_measurement1(sensor):
    sensor.start_periodic_measurement(0)
    (co2_concentration, temperature, humidity
     ) = sensor.blocking_read_measurement_data()
    print(f"co2_concentration: {co2_concentration}; "
          f"temperature: {temperature}; "
          f"humidity: {humidity}; "
          )
    sensor.force_recalibration(500)
    sensor.await_data_ready()
    (co2_concentration, temperature, humidity
     ) = sensor.read_measurement_data()
    print(f"co2_concentration: {co2_concentration}; "
          f"temperature: {temperature}; "
          f"humidity: {humidity}; "
          )
    sensor.stop_periodic_measurement()

